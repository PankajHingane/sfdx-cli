#!/usr/bin/env bash

set -ex

export OS=darwin
export ARCH=x64

source ./scripts/release/_init
source ./scripts/_github
# TODO: Eek a token and private url was here
# MOBILECI_BASE_URL="<REDACTED>"
MOBILECI_BASE_URL="<REDACTED>"
GIT_TOKEN="<A TOKEN WAS HERE>"

MOBILECI_MACOS_INSTALLER_TOKEN="${MOBILECI_MACOS_INSTALLER_TOKEN:-}"
if [[ -z "$MOBILECI_MACOS_INSTALLER_TOKEN" ]]; then
    stderr "[WARN] MOBILECI_MACOS_INSTALLER_TOKEN is undefined"
fi

VERSIONED_INSTALLER_NAME="$INSTALLER_BASE_NAME.pkg"
UNVERSIONED_INSTALLER_NAME="$PKG_NAME.pkg"

triggerBuild() {
    DEFAULT_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    GIT_BRANCH="${GIT_BRANCH:-$DEFAULT_GIT_BRANCH}"

    stdout "Triggering remote darwin installer build of branch $GIT_BRANCH at $MOBILECI_BASE_URL"

    set +x
    echo $NO_PROXY
    echo $OPS_NO_PROXY
    echo $HTTPS_PROXY
    git config --list
    # This is now handled by a webhook into the mobe team's Jenkins build server.  It is at the MOBILECI_BASE_URL.  The webhook is controlled from the
    # soma cli project
    # curl --head https://sfdxci.dop.sfdc.net
    # curl -vL "$MOBILECI_BASE_URL/job/macOS%20Installer%20(v7)/buildWithParameters?RELEASE_BRANCH=$GIT_BRANCH&token=$MOBILECI_MACOS_INSTALLER_TOKEN"
    set -x
}

cpAssetFromSigned() {
  SIGNED_TAG="v$SHORT_VERSION-Signed"
  TAG="v$SHORT_VERSION"
  ASSET_FILE_NAME="$VERSIONED_INSTALLER_NAME"
  # Get the tag and signed-tag asset ids from soma
#  TODO: how to get asset ids
  UNSIGNED_ASSET_ID=$(curl -sSL -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/salesforcecli/cli/releases/tags/$TAG?access_token=$GIT_TOKEN" | jq '.assets[].id')
  SIGNED_ASSET_ID=$(curl -sSL -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/salesforcecli/cli/releases/tags/$SIGNED_TAG?access_token=$GIT_TOKEN" | jq '.assets[].id')
  # Copy signed asset from <tag>-Signed back to the regular tag name (download and then upload)
#  TODO: Eek a token
  # curl -sSL -H "Authorization: token <TOKEN WAS HERE>" -H "Accept: application/octet-stream" https://api.github.com/repos/salesforcecli/cli/releases/assets/15223 > sfdx-cli-v7.68.6-d37008df83.pkg
  # Copy the artifact to the Jenkins workspace from the latest asset
  curl -sSL -H "Authorization: token $GIT_TOKEN" -H "Accept: application/octet-stream" "https://api.github.com/repos/salesforcecli/cli/releases/assets/$SIGNED_ASSET_ID" > $ASSET_FILE_NAME
  # Upload the artifact that was just moved to the Jenkins workspace to the release asset location
  curl -X POST --data-binary "@$ASSET_FILE_NAME" -H "Content-type: application/octet-stream" -H "Authorization: token $GIT_TOKEN" "https://api.github.com/repos/salesforcecli/cli/releases/$UNSIGNED_ASSET_ID/assets?name=$ASSET_FILE_NAME"
}

pollGhAndCopyToS3() {
    ASSET_FILE_NAME="$VERSIONED_INSTALLER_NAME"
    TAG="v$SHORT_VERSION-Signed"

    stdout "Polling github release $TAG for $ASSET_FILE_NAME"
    ASSET_URL=$(ghPollForAssetUrl "$ASSET_FILE_NAME")

    cd "$RELEASE_DIR"

    ghDownloadAsset "$ASSET_FILE_NAME"
    cp "$VERSIONED_INSTALLER_NAME" "$UNVERSIONED_INSTALLER_NAME"

    stdout "Releasing darwin installers to $CHANNEL"

    resetS3CacheDir

    cp "$VERSIONED_INSTALLER_NAME" "$UNVERSIONED_INSTALLER_NAME" "$S3_CACHE_DIR"

    s3upload "$VERSIONED_CACHE_CONTROL" \
        "$S3_CACHE_DIR/$VERSIONED_INSTALLER_NAME" \
        "$S3_CHANNEL_UPLOAD_URL/$VERSIONED_INSTALLER_NAME"

    s3upload "$UNVERSIONED_CACHE_CONTROL" \
        "$S3_CACHE_DIR/$UNVERSIONED_INSTALLER_NAME" \
        "$S3_CHANNEL_UPLOAD_URL/$UNVERSIONED_INSTALLER_NAME"
}

ghUploadAsset "$TXZ_PATH" "$VERSIONED_BASE.tar.xz"
ghDeleteAssetIfExists "$RELEASE_JSON" "$VERSIONED_INSTALLER_NAME"
triggerBuild
pollGhAndCopyToS3
# cpAssetFromSigned
addToManifest "installers" "${OS}-${ARCH}" "$S3_HOST_CHANNEL_BASE_URL/$VERSIONED_INSTALLER_NAME" "$RELEASE_DIR/$VERSIONED_INSTALLER_NAME"
