---
version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4
  jq: circleci/jq@2.2

parameters:
  run-auto-workflows:
    default: true
    type: boolean
  run-just-nuts:
    default: false
    type: boolean

jobs:
  # There are two pack jobs:
  # - test-pack-tarballs to run on every branch *other than main*
  # - pack-and-upload-tarballs to run only on main
  # The persise_to_workspace feature would allow use to have a
  # pack-tarballs and an upload-tarballs job, but the perf gains
  # is minimal since the workspace is almost a GB to attach.
  test-pack-tarballs:
    docker:
      - image: node:latest
    resource_class: xlarge
    steps:
      - checkout
      - run: |
          apt-get update
          apt-get install -y p7zip-full
      - restore_cache:
          keys:
            - v3-node-{{ checksum "NODE_VERSION.md" }}
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: yarn pack:tarballs
      - save_cache:
          key: v3-node-{{ checksum "NODE_VERSION.md" }}
          paths:
            - tmp/cache
            - tmp/node
      - run: yarn pack:verify
      - run: yarn test-smoke-unix

  pack-and-upload-tarballs: &pack-and-upload-tarballs
    docker:
      - image: node:latest
    resource_class: xlarge
    steps:
      - checkout
      - run: |
          apt-get update
          apt-get install -y p7zip-full
      - restore_cache:
          keys:
            - v3-node-{{ checksum "NODE_VERSION.md" }}
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: yarn pack:tarballs
      - save_cache:
          key: v3-node-{{ checksum "NODE_VERSION.md" }}
          paths:
            - tmp/cache
            - tmp/node
      - run: yarn pack:verify
      - run: yarn test-smoke-unix
      - run: yarn upload:tarballs

  pack-and-upload-macos-installer:
    macos:
      xcode: 11.7.0
    steps:
      - checkout
      - run: yarn install
      - run: yarn pack:macos
      - run: yarn upload:macos

  pack-and-upload-windows-installer:
    <<: *pack-and-upload-tarballs
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-{{ checksum "NODE_VERSION.md" }}
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: |
          apt-get update
          apt-get install -y p7zip-full \
            osslsigncode \
            nsis
      - run: yarn install
      - run: |
          echo $WINDOWS_SIGNING_KEY | base64 --decode > /tmp/windows-signing.pfx
      - run: yarn pack:win
      - run: yarn upload:win

  promote-stable-rc-tarballs:
    docker:
      - image: node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/promote-stable-rc-tarballs
  promote-stable-rc-mac:
    docker:
      - image: node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/promote-stable-rc-mac
  promote-stable-rc-win:
    docker:
      - image: node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/promote-stable-rc-win

  promote-channels:
    docker:
      - image: node:latest
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/promote

  change-case-start:
    docker:
      - image: node:latest
    steps:
      - release-management/install-change-case-mgmt
      - release-management/change-case-create

  npm-promotions:
    docker:
      - image: node:latest
    steps:
      - checkout
      - jq/install
      - run: yarn promote-dist-tags

  close-CTC:
    docker:
      - image: node:latest
    steps:
      - run:
          when: on_fail
          name: Close CTC case as Not Implemented
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" --status "Not Implemented"
            fi
      - run:
          name: All Good! Close CTC case/implementations
          when: on_success
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            fi

  run-all-nuts:
    docker:
      - image: node:latest
    parameters:
      sfdx_version:
        description: By default, the latest-rc version of the standalone CLI will be installed.
        default: latest-rc
        type: string

    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/run-plugin-nuts.js <<parameters.sfdx_version>>

  monitor-all-nuts:
    docker:
      - image: node:latest
    parameters:
      nuts_job_data:
        description: Parameter to pass the set of NUTs started across all plugins
        default: '[]'
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/monitor-plugin-nuts.js <<parameters.nuts_job_data>>

workflows:
  version: 2.1
  test-and-release:
    when: << pipeline.parameters.run-auto-workflows >>
    jobs:
      - release-management/validate-pr:
          filters:
            branches:
              ignore: main
      - release-management/test-package:
          name: node-latest
          node_version: latest
      - release-management/test-package:
          name: node-14
          node_version: '14'
      - release-management/test-package:
          name: node-14-windows
          node_version: '14'
          os: windows
      - release-management/test-package:
          name: node-12
          node_version: '12'
      - test-pack-tarballs:
          # no point to pack if the test fail, and we only care to test the pack with the node version
          # we ship (specified in package.json.oclif.node)
          requires:
            - node-14
          filters:
            branches:
              ignore: main # test the pack on PRs, but main will do pack-and-upload-tarballs
      - approval:
          type: approval
          requires:
            - node-latest
            - node-14
            - node-12
          filters:
            branches:
              only:
                - main
      - release-management/release-package:
          tag: latest-rc
          pre-job-steps:
            - release-management/pin-dependencies:
                tag: latest-rc
          github-release: true
          requires:
            - approval
          filters:
            branches:
              only:
                - main
      - pack-and-upload-tarballs:
          filters:
            branches:
              only:
                - main
          requires:
            - release-management/release-package
      - pack-and-upload-macos-installer:
          filters:
            branches:
              only:
                - main
          requires:
            - release-management/release-package
      - pack-and-upload-windows-installer:
          filters:
            branches:
              only:
                - main
          requires:
            - release-management/release-package
      - promote-stable-rc-tarballs:
          filters:
            branches:
              only:
                - main
          requires:
            - pack-and-upload-tarballs
      - promote-stable-rc-mac:
          filters:
            branches:
              only:
                - main
          requires:
            - pack-and-upload-macos-installer
      - promote-stable-rc-win:
          filters:
            branches:
              only:
                - main
          requires:
            - pack-and-upload-windows-installer
      - run-all-nuts:
          # This job requires env var CIRCLECI_API_TOKEN is set to a valid CircleCi API Token
          filters:
            branches:
              only:
                - main
          requires:
            - promote-channels
            - release-management/release-package

  promote-to-latest:
    triggers:
      - schedule:
          # Thursdays
          cron: 27 15 * * 4
          filters:
            branches:
              only:
                - main
    jobs:
      # manual approval in CircleCI to begin the promote
      - approval:
          type: approval

      # start the change case
      - change-case-start:
          context: CLI_CTC
          requires:
            - approval

      # we need to get the version/SHA from latest-rc before the npm promotion
      - promote-channels:
          requires:
            - change-case-start
      - npm-promotions:
          requires:
            - promote-channels

      # close change case
      - close-CTC:
          context: CLI_CTC
          requires:
            - npm-promotions
            - promote-channels
  monitor-all-nuts:
    # This workflow requires env var CIRCLECI_API_TOKEN is set to a valid CircleCi API Token
    #
    # Two env vars are used to control the amount of time this job will wait
    # for any individual pipeline to complete
    # NUTS_WAIT_TIME (default 900 seconds) - total time to wait for pipeline completion expressed in seconds
    # NUTS_COMPLETION_RETRY_CNT (default 30) - number of times monitor will retry check for pipeline completion
    # Wait interval between status checks is calculated as floor(NUTS_WAIT_TIME/NUTS_COMPLETION_RETRY_CNT)
    when: << pipeline.parameters.run-just-nuts >>
    jobs:
      - monitor-all-nuts:
          name: monitor-just-nuts
          nuts_job_data: '[]'
          filters:
            branches:
              only:
                - main
